from aiogram import Bot, Dispatcher, executor, types
import asyncio
import logging
from aiogram.dispatcher.filters import Command, Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ —Ñ–∞–π–ª—ã
from config import *
from keyboards import *
import texts


# --------------------------------------------------------#
# –í–∞—à API —Ç–æ–∫–µ–Ω
api = API
logging.basicConfig(level=logging.INFO)
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())
# --------------------------------------------------------#

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message):
    await message.answer(f'‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n' + texts.start, reply_markup=start_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–û –Ω–∞—Å'
@dp.message_handler(Text(equals=['‚ÑπÔ∏è –û –Ω–∞—Å']))
async def aboutas(message):
    await message.answer(texts.about_us, parse_mode='HTML', reply_markup=start_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–µ–π—Å–∫—É—Ä–∞–Ω—Ç'
@dp.message_handler(Text(equals=['üìù –ü—Ä–µ–π—Å–∫—É—Ä–∞–Ω—Ç']))
async def aboutas(message):
    await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —É—Å–ª—É–≥—É</b>', parse_mode='HTML', reply_markup=catalog_kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–∞–Ω–∏–∫—é—Ä"
@dp.callback_query_handler(text='–ú–∞–Ω–∏–∫—é—Ä')
async def manikur(call):
    await call.message.answer(texts.manikur, parse_mode='HTML', reply_markup=buy_kb)
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–µ–¥–∏–∫—é—Ä"
@dp.callback_query_handler(text='–ü–µ–¥–∏–∫—é—Ä')
async def pedikur(call):
    await call.message.answer(texts.pedikur, parse_mode='HTML', reply_markup=buy_kb)
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ"
@dp.callback_query_handler(text='–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ')
async def narast(call):
    await call.message.answer(texts.narast, parse_mode='HTML', reply_markup=buy_kb)
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î—Ä—É–≥–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
@dp.callback_query_handler(text='–î—Ä—É–≥–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è')
async def other(call):
    await call.message.answer(texts.other, parse_mode='HTML', reply_markup=buy_kb)
    await call.answer()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

